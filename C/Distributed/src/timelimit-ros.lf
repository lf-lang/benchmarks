/**
 * This is used to test the performance of using ROS as a communication method between
 * reactors (number of reactions per second).
 *
 * 1- To get this example working, install full ROS 2 desktop
 *    ('https://index.ros.org/doc/ros2/Installation/Foxy/').
 *
 *    Please note that 'colcon' should also be installed.
 *    See 'https://index.ros.org/doc/ros2/Tutorials/Colcon-Tutorial/' for more details.
 *
 * 2- Follow the instruction in
 *    https://index.ros.org/doc/ros2/Tutorials/Writing-A-Simple-Cpp-Publisher-And-Subscriber/
 *    **section 1** to create a 'timelimit-ros' package in the current (example/Distributed) folder.
 *
 * 3- Follow section 2.2 and 2.3 to modify the CMakeLists.txt and package.xml.
 *
 * 4- Replace the default C++14 standard in CMakeLists.txt (i.e., set(CMAKE_CXX_STANDARD 14))
 *    with:
 *
 *       # Default to C++20
 *       if(NOT CMAKE_CXX_STANDARD)
 *           set(CMAKE_CXX_STANDARD 20)
 *       endif()
 *
 * and rename the source in 'add_executable' to reflect
 *
 *   add_executable(timelimit-ros src/timelimit-ros.cpp)
 *
 * 5- Use lfc (in bin/) to compile the provided .lf file
 *
 *       lfc timelimit-ros.lf
 *
 * 6- Run the provided build-ROS-node.sh:
 *
 *       ./build-ROS-node.sh timelimit-ros timelimit-ros
 *
 * This will create a 'timelimit-ros' node in the package timelimit-ros (these names can be changed in
 * CMakeLists.txt and in the argument to build-ROS-node.sh).
 *
 * 7- Source the appropriate setup.bash and run the node:
 *
 *       source timelimit-ros/install/setup.bash
 *       ros2 run timelimit-ros timelimit-ros
 *
 */

target C {
    keepalive: true,
    no-compile: true,
    timeout: 10 secs
};

preamble {=
    #include <functional>
    #include <memory>
    #include <string>
    #include <iostream>

    #include "rclcpp/rclcpp.hpp"
    #include "std_msgs/msg/int32.hpp"

    #define QUEUE_DEPTH 1000
=}

reactor Clock(offset:time(0), period:time(1 sec)) {
    preamble {=
        class TimeLimitClock : public rclcpp::Node {
            public:
                TimeLimitClock()
                : Node("LF_TimeLimit_Clock")
                {
                    clock_ = this->create_publisher<std_msgs::msg::Int32>("LF_TimeLimit_y", QUEUE_DEPTH);
                }

                rclcpp::Publisher<std_msgs::msg::Int32>::SharedPtr clock_;
        };
    =}
    state timelimit_clock:{=std::shared_ptr<TimeLimitClock>=};
    timer t(offset, period);
    state count:int(0);
    reaction(startup) {=
        // std::cout << "Executing startup." << std::endl;
        char *argv[] = {(char*)"LF_TimeLimit_Clock", NULL};
        rclcpp::init(1, argv);
        self->timelimit_clock = std::make_shared<TimeLimitClock>();
    =}
    reaction(t) {=
        auto message = std_msgs::msg::Int32();
        message.data = ++(self->count);
        // printf("Reacting at time %ld.\n", get_elapsed_logical_time());
        self->timelimit_clock->clock_->publish(message);
        rclcpp::spin_some(self->timelimit_clock);
    =}

    reaction(shutdown) {=
        // std::cout << "Executing shutdown reaction." << std::endl;
        rclcpp::shutdown();
    =}
}
reactor Destination(period:time(1 sec)) {
    preamble {=
        class TimeLimitDestination : public rclcpp::Node {
            public:
                TimeLimitDestination(void* physical_action)
                : Node("LF_TimeLimit_Destination"), physical_action_(physical_action) {
                    destination_ = this->create_subscription<std_msgs::msg::Int32>("LF_TimeLimit_y",
                                                                                    QUEUE_DEPTH, std::bind(&TimeLimitDestination::x_callback,
                                                                                    this, std::placeholders::_1));
                }

            private:
                void x_callback(const std_msgs::msg::Int32::SharedPtr msg) const {
                    schedule_int(physical_action_, 0, msg->data);
                }
                rclcpp::Subscription<std_msgs::msg::Int32>::SharedPtr destination_;
                void* physical_action_;
        };
    =}
    physical action ros_message_x:int;
    state destination:{=std::shared_ptr<TimeLimitDestination>=};
    state s:int(1);
    state received_messages:int(0);
    state dropped_messages:int(0);

    reaction(startup) ros_message_x {=
        // std::cout << "Executing startup." << std::endl;
        self->destination = std::make_shared<TimeLimitDestination>(ros_message_x);
    =}

    reaction(ros_message_x) {=
        // printf("%d\n", ros_message_x->value);
        self->received_messages++;
        if (ros_message_x->value != self->s) {
            /* lf_print_warning("Expected %d and got %d. "
                "Jumping my expectation to %d in order to catch up with the sender.",
                self->s, ros_message_x->value, ros_message_x->value); */
            self->dropped_messages += ros_message_x->value - self->s;
            self->s = ros_message_x->value;
        }
        self->s++;
    =}

    // Keep spinning for new messages
    timer t(0, period);
    reaction(t) {=
        rclcpp::spin_some(self->destination);
        // std::cout << "Timer triggered." << std::endl;
    =}

    reaction(shutdown) {=
        lf_print("**** shutdown reaction invoked.");
        if (self->s != 10000002) {
            lf_print_warning("Expected 10000002 but got %d.", self->s);
        }
        lf_print("Approx. time per reaction: %lldns"
            " Dropped messages: %d",
            get_elapsed_physical_time()/(self->received_messages+1),
            self->dropped_messages);
        rclcpp::shutdown();
    =}
}
main reactor (period:time(1 usec)) {
    c = new Clock(period = period);
    d = new Destination(period = period);
}
