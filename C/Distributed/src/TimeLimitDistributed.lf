// This is used to test the performance of the federated runtime (number of reactions per second).
// See [Benchmarks wiki page](https://github.com/icyphy/lingua-franca/wiki/Benchmarks).
// Correct output for this 1, 2, 3, 4.
// Failure for this test is failing to halt or getting the wrong data.
// On a 2.6 GHz Intel Core i7 running MacOS Mojave, using a single core,
// this executes 10,000,000 cycles (two reactions in each cycle) in 0.6 seconds,
// for over 32 million reactions per second.
// This translates to 31 nanoseconds per reaction invocation.
target C {
    flags: ["-O2", "-Wall"],
    coordination: centralized,
    timeout: 10 secs
};
reactor Clock(offset:time(0), period:time(1 sec)) {
    output y:int;
    timer t(offset, period);
    state count:int(0);
    reaction(t) -> y {=
        (self->count)++;
        //printf("Reacting at time %ld.\n", get_elapsed_logical_time());
        SET(y, self->count);
    =}
}
reactor Destination {
    input x:int;
    state s:int(1);
    reaction(x) {=
        // printf("%d\n", x->value);
        if (x->value != self->s) {
            printf("Error: Expected %d and got %d.\n", self->s, x->value);
            exit(1);
        }
        self->s++;
    =}
    reaction(shutdown) {=
        lf_print("**** shutdown reaction invoked.");
        if (self->s != 10000002) {
            lf_print_warning("Expected 10000002 but got %d.", self->s);
        }
        lf_print("Approx. time per reaction: %lldns", get_elapsed_physical_time()/(self->s+1));
    =}
}
federated reactor TimeLimitDistributed(period:time(700 usec)) {
    c = new Clock(period = period);
    d = new Destination();
    c.y -> d.x;
}
