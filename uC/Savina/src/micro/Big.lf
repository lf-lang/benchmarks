/**
 * A benchmark that implements a many-to-many message passing scenario. Several workers are created,
 * each of which sends a ping message to one other worker. To which worker the ping message is sent
 * is decided randomly. The worker who receives the ping message replies with a pong. Uppon
 * receiving the pong, the worker sends the next ping message.
 *
 * In LF, the challenging aspect about this benchmark is its sparse activity. While each worker is
 * connected to all other workers, it will only send a message to precisely one of them for each
 * tag. Since we need to ensure that input ports have a single writer, each worker has to create
 * multiport inputs, where each port instance corresponds to one potential source of ping or pong
 * messages. In order to determine from which worker we received a ping or pong message, we need to
 * iterate over all ports and check `if_present()`. However, this becomes very expensive for a large
 * number of workers. For 120 workers we send a total of 120 pings and 120 pongs per iteration, but
 * we need to check up to 14400 ping ports and 14400 pong ports in each iteration. Obviously this
 * introduces a large overhead.
 *
 * @author Hannes Klein
 * @author Felix Wittwer
 * @author Christian Menard
 * @author Arthur Deng
 */
target uC {
  platform: Native,
  fast: true,
  build-type: Release,
  cmake-include: "../savina.cmake"
}

import BenchmarkRunner from "../BenchmarkRunner.lf"

preamble {=
  #include <stdio.h>
  #include "PseudoRandom.h"
  #include "benchmark_runner.h"
=}

// Despite the name, this only collects "finished" messages from all workers
// and lets the benchmark runner know when all the workers finished
reactor Sink(num_workers: size_t = 10) {
  input start: bool  // number of exit messages received
  state num_messages: size_t = 0
  input[120] worker_finished: bool
  output finished: bool

  reaction(start) {=
    // reset state
    self->num_messages = 0;
  =}

  reaction(worker_finished) -> finished {=
    // collect all exit messages, finish when all the messages have been received.
    size_t i;
    for(i = 0; i < self->num_workers; i++) {
        if(lf_is_present(worker_finished[i])) {
            self->num_messages += 1;
            if(self->num_messages == self->num_workers) {
                lf_set(finished, true);
            }
        }
    }
  =}
}

reactor Worker(bank_index: size_t = 0, num_messages: size_t = 20000, num_workers: size_t = 120) {
  preamble {=
    #include "PseudoRandom.h"
    #include "stdint.h"
  =}

  state num_pings: size_t = 0
  state random: PseudoRandom
  state exp_pong: size_t = {= SIZE_MAX =}

  input start: bool
  input[120] in_ping: bool
  input[120] in_pong: bool
  output[120] out_ping: bool
  output[120] out_pong: bool
  output finished: bool
  logical action next

  // send ping
  reaction(next) -> out_ping {=
    self->num_pings++;
    size_t to = nextInt(&(self->random)) % self->num_workers;
    self->exp_pong = to;
    lf_set(out_ping[to], true);
  =}

  // reply with pong
  reaction(in_ping) -> out_pong {=
    size_t i;
    for(i = 0; i < self->num_workers; i++) {
        if (lf_is_present(in_ping[i])) {
            lf_set(out_pong[i], true);
        }
    }
  =}

  // receive pong and send next ping
  reaction(in_pong) -> next, finished {=
    size_t i;
    for(i = 0; i < self->num_workers; i++) {
        if (lf_is_present(in_pong[i])) {
            if (i != self->exp_pong) {
                fprintf(stderr, "Expected pong from %zu but received pong from %zu", self->exp_pong, i);
            }
        }
    }

    // send next ping
    if (self->num_pings == self->num_messages) {
        lf_set(finished, true);
    } else {
        lf_schedule(next, 0);
    }
  =}

  reaction(start) -> next {=
    // reset state
    self->num_pings = 0;
    self->exp_pong = SIZE_MAX;
    initPseudoRandom(&(self->random), self->bank_index);

    // start execution
    lf_schedule(next, 0);
  =}
}

/* [[[cog
    cog.outl(f'main reactor (numIterations:size_t={numIterations}, numPingsPerReactor:size_t={numPingsPerReactor}, numReactors:size_t={numReactors})')
]]] */ // keep-format
main reactor(numIterations: size_t = 12, numPingsPerReactor: size_t = 20000, numReactors:size_t=120)
/** [[[end]]] */ // keep-format
{
  runner = new BenchmarkRunner(num_iterations=numIterations)
  sink = new Sink(num_workers=numReactors)
  worker = new[120] Worker(num_messages=numPingsPerReactor, num_workers=numReactors)

  (runner.start)+ -> sink.start, worker.start
  worker.finished -> sink.worker_finished
  sink.finished -> runner.finish

  worker.out_ping -> interleaved(worker.in_ping)
  worker.out_pong -> interleaved(worker.in_pong)

  reaction(startup) {=
    printBenchmarkInfo("BigReactorLFCBenchmark");
    printSystemInfo();
  =}
}
