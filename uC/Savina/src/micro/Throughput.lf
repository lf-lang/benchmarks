/**
 * Micro-benchmark from the Savina benchmark suite, where it is called Fork Join. See
 * https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 *
 * According to the Savina paper performance can be achieved by batch processing messages in the
 * worker actors. This is not possible with reactors because scheduling and advancing logical time
 * occurs after each round of message delivery.
 *
 * @author Hannes Klein (c++ version)
 * @author Matthew Chorlian (adapted C++ version to C)
 */
target uC {
  fast: true,
  platform: Native,
  build-type: Release,
  cmake-include: "../savina.cmake"
}

import BenchmarkRunner from "../BenchmarkRunner.lf"

preamble {=
  #include "benchmark_runner.h"
=}

reactor ThroughputReactor(totalMessages: size_t = 10000) {
  preamble {=
    #include <math.h>

    void performComputation(double theta) {
        double sint = sin(theta);
        // volatile to defeat dead code elimination
        volatile double res = sint * sint;
    }
  =}

  input inMessage: bool

  reaction(inMessage) {=
    performComputation(37.2);
  =}
}

reactor ThroughputProducer(totalMessages: size_t = 10000, numConsumer: size_t = 60) {
  state sent_messages: size_t = 0
  input start: bool
  output outMessage: bool
  output finished: bool
  logical action send_next_msg

  reaction(start, send_next_msg) -> outMessage, finished {=
    lf_set(outMessage, true);
    self->sent_messages++;
    if (self->sent_messages == self->totalMessages) {
        // reset state
        self->sent_messages = 0;
        lf_set(finished, true);
    }
    lf_schedule(send_next_msg, 0);
  =}
}

/* [[[cog
cog.outl(f'main reactor (numIterations:size_t={numIterations}, numMessagesPerReactor:size_t={numMessagesPerReactor}, numWorkers:size_t={numWorkers})')
]]] */ // keep-format
main reactor(numIterations: size_t = 12, numMessagesPerReactor: size_t = 10000, numWorkers: size_t = 60)
// [[[end]]]
{
  runner = new BenchmarkRunner(num_iterations=numIterations)
  producer = new ThroughputProducer(totalMessages=numMessagesPerReactor, numConsumer=numWorkers)
  worker = new[numWorkers] ThroughputReactor(totalMessages=numMessagesPerReactor)
  runner.start -> producer.start
  (producer.outMessage)+ -> worker.inMessage
  producer.finished -> runner.finish

  reaction(startup) {=
    printBenchmarkInfo("ThroughputLFCBenchmark");
    printSystemInfo();
  =}
}
