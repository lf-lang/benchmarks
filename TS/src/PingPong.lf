// Based on https://www.scala-lang.org/old/node/54
// See https://shamsimam.github.io/papers/2014-agere-savina.pdf
target TypeScript {
    fast: true
};

import BenchmarkRunner from "BenchmarkRunner.lf";

reactor Ping(limit:number(100000)) {
    input receive:number;
    input start:boolean;
    output send:number;
    state pingsLeft:number(limit);
    state startTime:time;
    logical action serve;
    output done:boolean;
    
    reaction (start) -> send {=
        send = pingsLeft;
        pingsLeft -= 1;
    =}
    reaction (serve) -> send {= 
        send = pingsLeft;
        pingsLeft -= 1;
    =}
    reaction (receive) -> serve, done {=
        if (pingsLeft > 0) {
            actions.serve.schedule(0, null);
        } else {
            done = true;
        }
    =}
}
reactor Pong {
    input receive:number;
    output send:number;
    reaction (receive) -> send {=
        send = receive as number;   
    =}
}
main reactor PingPong(numIterations:number(12), limit:number(100000)) {
    
    runner = new BenchmarkRunner(num_iterations=numIterations);
    
    ping = new Ping(limit = limit);
    pong = new Pong();
    
    reaction (startup) {=
        console.log("Start PingPong LF Benchmark!");
    =}

    runner.start -> ping.start;
    ping.send -> pong.receive;
    pong.send -> ping.receive;
    ping.done -> runner.finish;
} 