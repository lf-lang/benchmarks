/**
 * @author Wonseo Choi
 * @author DukiChoi
 */
 
 target TypeScript {
    fast: true
};

reactor Philosopher(bank_index:number(0), count:number(10000)) {    
    input eat: boolean;
    input denied: boolean;
    output hungry: boolean;
    output done: boolean;
    output finished: boolean;

    state numEaten: number(0);
    
    reaction (startup) -> hungry {=
        console.log("Hello! I am Philosopher " + bank_index + " and I am hungry!")
        numEaten = 0;
        hungry = true;
    =}
    
    reaction (eat) -> done, finished, hungry {=
        console.log("Philosopher " + bank_index + " is eating.")
        ++numEaten;
        done = true;

        if (numEaten == count) {
            finished = true;
        } else {
            hungry = true;
        }
    =}
    
    reaction (denied) -> hungry {=
        console.log("Philosopher" + bank_index + "was denied and is thinking.")
        hungry = true;
    =}
}

reactor Arbitrator(num_philosophers:number(20)) {

}

main reactor Philosophers (numIterations:number(12), num_philosophers:number(20), count:number(10000)){

    arbitrator = new Arbitrator(num_philosophers = num_philosophers);
    philosophers = new[num_philosophers] Philosopher(count=count);
 
    arbitrator.eat -> philosophers.eat;
    arbitrator.denied -> philosophers.denied;
    philosophers.hungry -> arbitrator.hungry;
    philosophers.done -> arbitrator.done;
    philosophers.finished -> arbitrator.finished;
}