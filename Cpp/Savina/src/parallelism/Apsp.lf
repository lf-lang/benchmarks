/**
 * Copyright (C) 2020 TU Dresden
 * 
 * This benchmark implements a parallel all pairs shortest path algorithm. In
 * order to split the workload, the large input matrix of size graphSize x
 * graphSize is split into smaller blocks of size blockSize x blockSize. Each of
 * the worker reactors (ApspFloydWarshallBlock) processes one of these blocks.
 * The worker reactors are organized in the same matrix pattern, replication the
 * structure of the blocks within the large input matrix. Each of the workers
 * operates on its local block data, and sends results to all other workers in
 * the same column or in the same row. The data from the neighbors is then used
 * to compute the next intermediate result and to update the local state
 * accordingly.
 * 
 * @author Christian Menard
 * @author Hannes Klein
 */

target Cpp {
    build-type : Release,
    no-runtime-validation: true,
    cmake-include: "../IncludeHeaders.cmake"
};

import BenchmarkRunner from "../BenchmarkRunner.lf";


public preamble {=
    #include "Matrix.hh"
    
    using MatrixOfLong = Matrix<long>;
    using DataPtr = reactor::ImmutableValuePtr<MatrixOfLong>;
    using MutDataPtr = reactor::MutableValuePtr<MatrixOfLong>;
=}

reactor ApspFloydWarshallBlock(
    bank_index: size_t{0},
    row_index: size_t{0},
    graphSize: size_t{300},
    blockSize: size_t{50},
    dimension: size_t{6},
    verbose: bool{false})
{
    state numNeighbors: {=const size_t=}{{=2 * (dimension - 1)=}};
    state rowOffset: {=const size_t=}{{=row_index * blockSize=}}; // row offset of the block of this reactor
    state colOffset: {=const size_t=}{{=bank_index * blockSize=}}; // column offset of the block of this reactor

    state k: size_t{0}; // iteration counter
    state reportedFinish: bool {false};

    input start: MatrixOfLong;

    input[dimension] fromRow: MatrixOfLong;
    input[dimension] fromCol: MatrixOfLong;

    output toNeighbors: MatrixOfLong;    
    output finished: void;
    
    logical action notifyNeighbors: MatrixOfLong;
    
    reaction(start) -> notifyNeighbors {=
        // reset local state
        k = 0;
        reportedFinish = false;
        
        // start execution
        auto matrix = extractDataFromMatrix(start.get());
        notifyNeighbors.schedule(std::move(matrix));
    =}
    
    reaction(notifyNeighbors) -> toNeighbors {=
        //notify all neighbors
        toNeighbors.set(notifyNeighbors.get());
    =}
    
    reaction(fromRow, fromCol) -> notifyNeighbors, finished {=
        // do nothing if complete
        if(k == graphSize) {
            return;
        }
        
        // perform computation
        auto matrix = reactor::make_mutable_value<MatrixOfLong>(blockSize, blockSize);
        
        for(size_t i = 0; i < blockSize; i++) {
            for(size_t j = 0; j < blockSize; j++) {
                int gi = rowOffset + i;
                int gj = colOffset + j;
                
                long result = getElementAt(gi, k, fromRow, fromCol) + getElementAt(k, gj, fromRow, fromCol);
                matrix->at(i, j) = std::min(getElementAt(gi, gj, fromRow, fromCol), result);
            }
        }
       
       // increment iteration count
       k++;
       
       if(k == graphSize) {
            if(verbose && bank_index == 0 && row_index == 0) {
                // debugging and result checking
                for(size_t i = 0; i < blockSize; i++) {
                    for(size_t j = 0; j < blockSize; j++) {
                        std::cout << matrix->at(i, j) << ' ';
                    }
                    std::cout << '\n';
                }
            }
            finished.set();
        } else {
            // send the result to all neighbors in the next iteration
            notifyNeighbors.schedule(std::move(matrix));        
        }
    =}

    // Extract (copy) the data block that is relevant for this instance from the given matrix 
    const method extractDataFromMatrix(srcData: {=const DataPtr&=}): DataPtr {=
        auto localData = reactor::make_mutable_value<MatrixOfLong>(blockSize, blockSize);
        
        // FIXME memcpy should be much faster here, but on the other hand this is only done during initialization
        for(size_t i = 0; i < blockSize; i++) {
            for(size_t j = 0; j < blockSize; j++) {
                localData->at(i, j) = srcData->at(rowOffset + i, colOffset + j);
            }
        }
        return DataPtr{std::move(localData)};
    =}
    
    // retrieve the element at the given position from the known data
    const method getElementAt(
        row: size_t,
        col: size_t,
        rowPorts: {=const std::vector<reactor::Input<MatrixOfLong>>&=},
        colPorts: {=const std::vector<reactor::Input<MatrixOfLong>>&=}
    ): long {=

        size_t destRow = row / blockSize;
        size_t destCol = col / blockSize;
        
        size_t localRow = row % blockSize;
        size_t localCol = col % blockSize;
        
        if (destRow == row_index) {
            const auto& data = *rowPorts[destCol].get();
            return data.at(localRow, localCol);
        } else if (destCol == bank_index) {
            const auto& data = *colPorts[destRow].get();
            return data.at(localRow, localCol);
        } else {
            std::cerr << "Error: unexpected target location (" << destCol << ',' << destRow << ")\n";
            exit(2);
        }
    =}
}


reactor ApspRow(
    bank_index: size_t{0},
    blockSize: size_t{50},
    numNodes: size_t{300},
    dimension: size_t{6},
    verbose: bool{false}) {
        
    input start: MatrixOfLong;
    output[dimension] finished: void;

    input[{=dimension*dimension=}] fromCol: MatrixOfLong;
    output[dimension] toCol: MatrixOfLong;
        
    blocks = new[dimension] ApspFloydWarshallBlock(
        row_index=bank_index,
        blockSize=blockSize,
        graphSize=numNodes,
        dimension=dimension,
        verbose=verbose
    );
    
    // connect all blocks within the row
    (blocks.toNeighbors)+ -> blocks.fromRow;
    
    // block output to all column neighbours
    blocks.toNeighbors -> toCol;
    // block input from all column neighbours
    fromCol -> interleaved(blocks.fromCol);
    
    // broadcast the incoming matrix to all blocks
    (start)+ -> blocks.start;
    // collect and forward finished signals from all blocks
    blocks.finished -> finished;
}

reactor ApspMatrix(
    blockSize: size_t{50},
    numNodes: size_t{300},
    dimension: size_t{6},
    verbose: bool{false})
{
    input start: MatrixOfLong;
    output[{=dimension*dimension=}] finished: void;
    
    rows = new[dimension] ApspRow(blockSize=blockSize, numNodes=numNodes, dimension=dimension, verbose=verbose);
    
    // broadcast the incoming matrix to all rows
    (start)+ -> rows.start;
    // collect and forward finished signals from all blocks
    rows.finished -> finished;
    
    (rows.toCol)+ -> rows.fromCol;
}

main reactor (
    numIterations: size_t{12},
    maxEdgeWeight: size_t{100},
    blockSize: size_t{50},
    numNodes: size_t{300},
    verbose: bool{false}) {
    
    state graphData: DataPtr;
    state numBlocksFinished: size_t{0};
    
    runner = new BenchmarkRunner(numIterations=numIterations);
    matrix = new ApspMatrix(
        blockSize=blockSize,
        numNodes=numNodes,
        dimension={=numNodes / blockSize=},
        verbose=verbose
    );
      
    reaction(startup) {=
        printBenchmarkInfo("ApspBenchmark");
        printArgs("numIterations", numIterations, "maxEdgeWeight", maxEdgeWeight, "numNodes", numNodes, "blockSize", blockSize);
        printSystemInfo();
        
        graphData = reactor::ImmutableValuePtr<MatrixOfLong>(generateGraph(numNodes, maxEdgeWeight));
    =}
    
    reaction(runner.start) -> matrix.start {=
        // reset local state
        numBlocksFinished = 0;

        // start execution
        matrix.start.set(graphData);
    =}

    reaction (matrix.finished) -> runner.finished {=
        for (auto& f : matrix.finished) {
            if (f.is_present()) {
                numBlocksFinished++;
            }
        }
        size_t dimension = numNodes / blockSize;
        if (numBlocksFinished == dimension*dimension) {
            runner.finished.set();
        }
    =}

    private preamble {=  
        #include "PseudoRandom.hh"
        
        MutDataPtr generateGraph(size_t N, size_t W) {
            PseudoRandom random(N);
            reactor::MutableValuePtr<MatrixOfLong> localData = reactor::make_mutable_value<MatrixOfLong>(N, N);
            
            for(size_t i{0}; i < N; i++) {
                for(size_t j{i+1}; j < N; j++) {
                    int r = random.nextInt(W)+1;
                    localData->at(i, j) = r;
                    localData->at(j, i) = r;
                }
            }
            
            return localData;
        }
    =}
}